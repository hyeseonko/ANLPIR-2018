package it.unitn.nlpir.system.demo;

import it.unitn.nlpir.cli.Args;
import it.unitn.nlpir.cli.Argument;
import it.unitn.nlpir.experiment.Experiment;
import it.unitn.nlpir.resultsets.Candidate;
import it.unitn.nlpir.resultsets.Result;
import it.unitn.nlpir.uima.Analyzer;
import it.unitn.nlpir.uima.UIMAUtil;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.Scanner;

import org.apache.uima.jcas.JCas;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Stopwatch;


/**Demo class for showing the representation generated by various Experiment classes**/

public class TextPairRepresentationDemo {
	protected static final String DOCUMENT_LANGUAGE = "en_us";


	@Argument(description = "Fully qualified name of the Experiment class instance", required = false)
	protected static String expClassName = "it.unitn.nlpir.experiment.TrecQATestExperiment";

	@Argument(description = "Experiment configuration path")
	protected static String expConfigPath;
	protected static final Logger logger = LoggerFactory.getLogger(TextPairRepresentationDemo.class);

	
	protected Experiment experiment;
	protected Analyzer analyzer;

	protected JCas questionCas;
	protected JCas documentCas;
	
	public TextPairRepresentationDemo(){
		
		
		try {
			
			if (expConfigPath!=null){
				Constructor<?> c;
				c = Class.forName(expClassName).getConstructor(String.class);
				experiment = (Experiment) c.newInstance(expConfigPath);
			}
			else{
				Class<?> c = null;
				c = Class.forName(expClassName);
				experiment = (Experiment) c.newInstance();
			}
			
		} catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		analyzer = new Analyzer(experiment.getAnalysisEngineList());
		
		// Create CAS for the question
		questionCas = analyzer.getNewJCas();

		// Create a CAS for the document
		documentCas = analyzer.getNewJCas();

	}

	protected void disableQuestionRelevantAnalyzersOnly(){
		analyzer.disableAnalysisEngine("it.unitn.nlpir.annotators.old.QuestionClassifierWithCustomModels");
		analyzer.disableAnalysisEngine("it.unitn.nlpir.annotators.old.SPTKQuestionClassifierWithCustomModels");
		analyzer.disableAnalysisEngine("it.unitn.nlpir.annotators.QuestionFocusThresholdAnnotator");
		analyzer.disableAnalysisEngine("it.unitn.nlpir.annotators.QuestionFocusAnnotator");
		analyzer.disableAnalysisEngine("QuestionFocusAnnotator");
		analyzer.disableAnalysisEngine("QuestionFocusThresholdAnnotator");
	} 
	
	
	public void execute(){
		Scanner scanner = new Scanner(System.in);
		
		logger.info("The output of the system is are the two structured relational representations produced by your experimental class of choice.");
		while (true) {
			logger.info("Enter a pair of texts delimited by tabulation (type \"q\" to exit): ");

			String input = scanner.nextLine();
			
			if (input.equals("q"))
				break;

			String [] tweets = input.split("\t");
			UIMAUtil.setupCas(questionCas, "tweet1", tweets[0]);
			UIMAUtil.setupCas(documentCas, "tweet2", tweets[1]);
			
			//run an UIMA pipeline on the two pieces of text
			analyzer.analyze(questionCas);
			analyzer.analyze(documentCas);
			Result result = new Result("tweet1", "tweet2", "1.0",
					"1.0", "false", tweets[1]);
			
			//extract the features, if any, generate the REL structures
			Candidate c = experiment.generateCandidate(questionCas, documentCas, result);
			
			
			
			logger.info(String.format("Text1: %s", c.getQa().getA()));
			logger.info(String.format("Text2: %s", c.getQa().getB()));
			//break;
			
		}
		scanner.close();
	}


	public static void main(String[] args) {
		try{
			Args.parse(TextPairRepresentationDemo.class, args);
		}
		catch (Exception e){
			Args.usage(TextPairRepresentationDemo.class);
			e.printStackTrace();
			return;
		}


		TextPairRepresentationDemo application = new TextPairRepresentationDemo();
		
		try {
			Stopwatch watch = new Stopwatch();
			watch.start();
			application.execute();
			logger.info("Run-time: {} (ms)", watch.elapsedMillis());
		} catch (IllegalArgumentException e) {
			Args.usage(application);
			e.printStackTrace();
		}

	}
}
